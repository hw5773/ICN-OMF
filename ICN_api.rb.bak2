defEvent :vm_prepared do |state|
	state.find_all do |v|
		v[:type] == 'vm' && !v[:membership].empty?
	end.size >= ARGV[-5].to_i
end

defEvent :vm_run do |state|
	state.find_all do |v|
		v[:type] == 'vm' && v[:stage] && v[:stage] == 2
	end.size >= ARGV[-5].to_i
end

defEvent :vm_ip_set do |state|
	state.find_all do |v|
		v[:type] == 'vm' && v[:stage] && v[:stage] == 3
	end.size >= ARGV[-5].to_i
end

defEvent :vm_eth_set do |state|
	state.find_all do |v|
		v[:type] == 'vm' && v[:stage] && v[:stage] == 4
	end.size >= ARGV[-5].to_i
end

defEvent :vm_rt_set do |state|
	state.find_all do |v|
		v[:type] == 'vm' && v[:stage] && v[:stage] == 5
	end.size >= ARGV[-5].to_i
end

defEvent :vm_ccn_set do |state|
	state.find_all do |v|
		v[:type] == 'vm' && v[:stage] && v[:stage] == 6
	end.size >= ARGV[-5].to_i
end

defEvent :vm_set do |state|
	state.find_all do |v|
		v[:type] == 'vm' && v[:stage] && v[:stage] == 7
	end.size >= ARGV[-5].to_i
end

def ccn_setting(g, a)
	group('init').exec("./source_codes/graph.sh #{ARGV[-5]} #{ARGV[-4]} &" ) 

	after 5 do
		group('init').exec("sudo rm /var/lib/dhcp/dhcpd.leases &")
	end

	after 10 do
		group('init').exec("sudo mv /root/.ssh/known_hosts /root/.ssh/known_hosts.bak &")
	end

	after 15 do
		group('init').exec("sudo touch /var/lib/dhcp/dhcpd.leases &")
	end

	after 20 do
		group('init').exec("/etc/init.d/isc-dhcp-server restart &")
	end

	after 25 do
		group('init').exec("sudo touch /root/.ssh/known_hosts &")
	end

	after 30 do
		group('init').exec("python ./source_codes/analysis.py #{ARGV[-5]} &")
	end

	after 35 do
		group('init').exec("python ./source_codes/routing.py #{ARGV[-5]} &")
	end

	after 40 do
		group('init').exec("python ./source_codes/ccnd.py #{ARGV[-3]} #{ARGV[-2]} #{ARGV[-1]} &")
	end

	after 45 do
		group('vmgens') do |g|
			for i in 1..ARGV[-5]
				g.create_resource("test#{i.to_s}", type: 'vm', hrn: "test#{i.to_s}", uid: "test#{i.to_s}", sn: i, vm_name: "test#{i.to_s}"+Time.now.to_i.to_s, action: :clone_from)
			end

			onEvent :vm_prepared do
				info "#{ARGV[-5]} vms creating is prepared"
				info "#{ARGV[-5]} vms are created. Now run them"
				group('init').exec("python ./source_codes/xmlgen.py #{ARGV[-5]} &")
				after 30 do
					g.resources[type: 'vm', uid: 'test1'].action = "run"
					after 3 do
						g.resources[type: 'vm', uid: 'test2'].action = "run"
					end
					after 6 do
						g.resources[type: 'vm', uid: 'test3'].action = "run"
					end
				end
			end

			onEvent :vm_run do
				info "#{ARGV[-5]} vms are run. Now set the manage IPs"
				g.resources[type: 'vm', uid: 'test1'].action = "set_ip"
				after 3 do
					g.resources[type: 'vm', uid: 'test2'].action = "set_ip"
				end
				after 6 do
					g.resources[type: 'vm', uid: 'test3'].action = "set_ip"
				end
			end

			onEvent :vm_ip_set do
				info "#{ARGV[-5]} vms' manage IPs are set. Now set ethernet IPs for them"
				g.resources[type: 'vm', uid: 'test1'].action = "eth"
				g.resources[type: 'vm', uid: 'test2'].action = "eth"
				g.resources[type: 'vm', uid: 'test3'].action = "eth"
			end

			onEvent :vm_eth_set do
				info "#{ARGV[-5]} vms' ethernet IPs are set. Now set routing table for each vms"
				g.resources[type: 'vm', uid: 'test1'].action = "rt"
				g.resources[type: 'vm', uid: 'test2'].action = "rt"
				g.resources[type: 'vm', uid: 'test3'].action = "rt"
			end

			onEvent :vm_rt_set do
				info "IP network is created"
				g.resources[type: 'vm', uid: 'test1'].role_set = "publisher"
				g.resources[type: 'vm', uid: 'test2'].role_set = "router"
				g.resources[type: 'vm', uid: 'test3'].role_set = "subscriber"
				g.resources[type: 'vm', uid: 'test1'].action = "ccn"
				g.resources[type: 'vm', uid: 'test2'].action = "ccn"
				g.resources[type: 'vm', uid: 'test3'].action = "ccn"
			end

			onEvent :vm_ccn_set do
				info "Generating CCN overlay network"
				group('init').exec("python ./source_codes/setccnd.py #{ARGV[-3]} #{ARGV[-2]} #{ARGV[-1]} &")
				after 10 do
					g.resources[type: 'vm', uid: 'test1'].action = "complete"
				end
				after 20 do
					g.resources[type: 'vm', uid: 'test2'].action = "complete"
				end
				after 30 do
					g.resources[type: 'vm', uid: 'test3'].action = "complete"
				end
			end
		end
	end			
end

def createRsc(g, c)	
	g.create_resource('vm'+c.to_s, type: 'vm', hrn: 'vm'+c.to_s, uid: 'vm'+c.to_s, vm_name: 'vm'+c.to_s+Time.now.to_i.to_s, sn: c, action: :clone_from)
end

def pingGW(g, c)
	g.resources[type: 'vm', uid: 'test'+c.to_s].action = 'ping_gw'
end

def ccnput(g, c)
	g.resources[type: 'vm', uid: 'test'+c.to_s].action = 'ccn_put'
end

def ccnget(g, c)
	g.resources[type: 'vm', uid: 'test'+c.to_s].action = 'ccn_get'
end

def ccngetip(g, c, b)
	g.resources[type: 'vm', uid: 'test'+c.to_s].back_address = b
	g.resources[type: 'vm', uid: 'test'+c.to_s].action = 'ccn_get_ip'
end
